{"version":3,"sources":["logo.svg","serviceWorker.js","redux/actions.js","components/AddTodo.js","redux/actionTypes.js","components/Todo.js","constants.js","redux/selectors.js","components/TodoList.js","components/VisibilityFilters.js","App.js","redux/reducers/visibilityFilter.js","redux/reducers/todos.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","nextTodoId","AddTodo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateInput","input","setState","handleAddTodo","addTodo","state","_this2","react_default","a","createElement","onChange","e","target","value","className","onClick","React","Component","connect","content","type","payload","id","toggleTodo","_ref","todo","completed","cx","VISIBILITY_FILTERS","ALL","COMPLETED","INCOMPLETE","getTodosState","store","todos","getTodos","allIds","getTodoList","map","objectSpread","byIds","getTodoById","visibilityFilter","allTodos","filter","getTodosByVisibilityFilter","length","index","components_Todo","key","concat","activeFilter","setFilter","keys","filterKey","currentFilter","App","components_AddTodo","components_TodoList","components_VisibilityFilters","initialState","arguments","undefined","action","combineReducers","_action$payload","toConsumableArray","defineProperty","createStore","rootReducer","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5daf30fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_TODO, TOGGLE_TODO, SET_FILTER } from \"./actionTypes\";\n\nlet nextTodoId = 0;\n\nexport const addTodo = content => ({\n  type: ADD_TODO,\n  payload: {\n    id: ++nextTodoId,\n    content\n  }\n});\n\nexport const toggleTodo = id => ({\n  type: TOGGLE_TODO,\n  payload: { id }\n});\n\nexport const setFilter = filter => ({ type: SET_FILTER, payload: { filter } });\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addTodo } from \"../redux/actions\";\n\nclass AddTodo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { input: \"\" };\n  }\n\n  updateInput = input => {\n    this.setState({ input });\n  };\n\n  handleAddTodo = () => {\n    this.props.addTodo(this.state.input);\n    this.setState({ input: \"\" });\n  };\n\n  render() {\n    return (\n      <div>\n        <input\n          onChange={e => this.updateInput(e.target.value)}\n          value={this.state.input}\n        />\n        <button className=\"add-todo\" onClick={this.handleAddTodo}>\n          Add Todo\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { addTodo }\n)(AddTodo);\n// export default AddTodo;\n","export const ADD_TODO = \"ADD_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const SET_FILTER = \"SET_FILTER\";","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport cx from \"classnames\";\nimport { toggleTodo } from \"../redux/actions\";\n\nconst Todo = ({ todo, toggleTodo }) => (\n  <li className=\"todo-item\" onClick={() => toggleTodo(todo.id)}>\n    {todo && todo.completed ? \"👌\" : \"👋\"}{\" \"}\n    <span\n      className={cx(\n        \"todo-item__text\",\n        todo && todo.completed && \"todo-item__text--completed\"\n      )}\n    >\n      {todo.content}\n    </span>\n  </li>\n);\n\n// export default Todo;\nexport default connect(\n  null,\n  { toggleTodo }\n)(Todo);\n","export const VISIBILITY_FILTERS = {\n    ALL: \"all\",\n    COMPLETED: \"completed\",\n    INCOMPLETE: \"incomplete\"\n  };\n  ","import { VISIBILITY_FILTERS } from \"../constants\";\n\nexport const getTodosState = store => store.todos;\n\nexport const getTodoList = store =>\n  getTodosState(store) ? getTodosState(store).allIds : [];\n\nexport const getTodoById = (store, id) =>\n  getTodosState(store) ? { ...getTodosState(store).byIds[id], id } : {};\n\n/**\n * example of a slightly more complex selector\n * select from store combining information from multiple reducers\n */\nexport const getTodos = store =>\n  getTodoList(store).map(id => getTodoById(store, id));\n\nexport const getTodosByVisibilityFilter = (store, visibilityFilter) => {\n  const allTodos = getTodos(store);\n  switch (visibilityFilter) {\n    case VISIBILITY_FILTERS.COMPLETED:\n      return allTodos.filter(todo => todo.completed);\n    case VISIBILITY_FILTERS.INCOMPLETE:\n      return allTodos.filter(todo => !todo.completed);\n    case VISIBILITY_FILTERS.ALL:\n    default:\n      return allTodos;\n  }\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Todo from \"./Todo\";\n// import { getTodos } from \"../redux/selectors\";\nimport { getTodosByVisibilityFilter } from \"../redux/selectors\";\nimport { VISIBILITY_FILTERS } from \"../constants\";\n\nconst TodoList = ({ todos }) => (\n  <ul className=\"todo-list\">\n    {todos && todos.length\n      ? todos.map((todo, index) => {\n          return <Todo key={`todo-${todo.id}`} todo={todo} />;\n        })\n      : \"No todos, yay!\"}\n  </ul>\n);\n\n// const mapStateToProps = state => {\n//   const { byIds, allIds } = state.todos || {};\n//   const todos =\n//     allIds && state.todos.allIds.length\n//       ? allIds.map(id => (byIds ? { ...byIds[id], id } : null))\n//       : null;\n//   return { todos };\n// };\n\nconst mapStateToProps = state => {\n  const { visibilityFilter } = state;\n  const todos = getTodosByVisibilityFilter(state, visibilityFilter);\n  return { todos };\n  //   const allTodos = getTodos(state);\n  //   return {\n  //     todos:\n  //       visibilityFilter === VISIBILITY_FILTERS.ALL\n  //         ? allTodos\n  //         : visibilityFilter === VISIBILITY_FILTERS.COMPLETED\n  //           ? allTodos.filter(todo => todo.completed)\n  //           : allTodos.filter(todo => !todo.completed)\n  //   };\n};\n// export default TodoList;\nexport default connect(mapStateToProps)(TodoList);\n","import React from \"react\";\nimport cx from \"classnames\";\nimport { connect } from \"react-redux\";\nimport { setFilter } from \"../redux/actions\";\nimport { VISIBILITY_FILTERS } from \"../constants\";\n\nconst VisibilityFilters = ({ activeFilter, setFilter }) => {\n  return (\n    <div className=\"visibility-filters\">\n      {Object.keys(VISIBILITY_FILTERS).map(filterKey => {\n        const currentFilter = VISIBILITY_FILTERS[filterKey];\n        return (\n          <span\n            key={`visibility-filter-${currentFilter}`}\n            className={cx(\n              \"filter\",\n              currentFilter === activeFilter && \"filter--active\"\n            )}\n            onClick={() => {\n              setFilter(currentFilter);\n            }}\n          >\n            {currentFilter}\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return { activeFilter: state.visibilityFilter };\n};\n// export default VisibilityFilters;\nexport default connect(\n  mapStateToProps,\n  { setFilter }\n)(VisibilityFilters);\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport AddTodo from \"./components/AddTodo\";\nimport TodoList from \"./components/TodoList\";\nimport VisibilityFilters from \"./components/VisibilityFilters\";\n\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <h1>Todo List</h1>\n      <AddTodo />\n      <TodoList />\n      <VisibilityFilters />\n    </div>\n  );\n}\n\nexport default App;\n","import { SET_FILTER } from \"../actionTypes\";\nimport { VISIBILITY_FILTERS } from \"../../constants\";\n\nconst initialState = VISIBILITY_FILTERS.ALL;\n\nconst visibilityFilter = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_FILTER: {\n      return action.payload.filter;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default visibilityFilter;\n","import { ADD_TODO, TOGGLE_TODO } from \"../actionTypes\";\n\nconst initialState = {\n  allIds: [],\n  byIds: {}\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TODO: {\n      const { id, content } = action.payload;\n      return {\n        ...state,\n        allIds: [...state.allIds, id],\n        byIds: {\n          ...state.byIds,\n          [id]: {\n            content,\n            completed: false\n          }\n        }\n      };\n    }\n    case TOGGLE_TODO: {\n      const { id } = action.payload;\n      return {\n        ...state,\n        byIds: {\n          ...state.byIds,\n          [id]: {\n            ...state.byIds[id],\n            completed: !state.byIds[id].completed\n          }\n        }\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport visibilityFilter from \"./visibilityFilter\";\nimport todos from \"./todos\";\n\nexport default combineReducers({ todos, visibilityFilter });\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nexport default createStore(rootReducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store = {store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}